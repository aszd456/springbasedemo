<?xml version="1.0" encoding="utf-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/cache
        http://www.springframework.org/schema/cache/spring-cache-3.1.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--构造方法注入-->
    <bean class="org.javaboy.Book" id="book">
        <constructor-arg index="0" value="1"/>
        <constructor-arg index="1" value="三国"/>
        <constructor-arg index="2" value="30"/>
    </bean>
    <!--set 方法注入
    <bean class="org.javaboy.Book" id="book">
        <property name="id" value="1"/>
        <property name="name" value="三国"/>
        <property name="prize" value="30"/>
    </bean>
    -->
    <!--静态工厂注入-->
    <bean class="org.javaboy.OkHttpUtils" factory-method="getInstance" id="okHttpClient"/>

    <!--对象注入 通过ref引入一个对象
    <bean class="org.javaboy.User" id="user">
        <property name="cat" ref="cat"/>
    </bean>
    <bean class="org.javaboy.Cat" id="cat">
        <property name="name" value="小白"/>
        <property name="color" value="white"/>
    </bean>
    -->
    <!--数组注入
    <bean class="org.javaboy.User" id="user">
        <property name="cat" ref="cat"/>
        <property name="favorites">
            <array>
                <value>足球</value>
                <value>篮球</value>
                <value>乒乓球</value>
            </array>
        </property>
    </bean>
    -->
    <!--集合
    <bean class="org.javaboy.User" id="user">
        <property name="cat" ref="cat"/>
        <property name="favorites">
            <list>
                <value>足球</value>
                <value>篮球</value>
                <value>乒乓球</value>
            </list>
        </property>
        <property name="cats">
            <list>
                <ref bean="cat"/>
                <ref bean="cat2"/>
                <bean class="org.javaboy.Cat" id="cat3">
                    <property name="name" value="小花"/>
                    <property name="color" value="花色"/>
                </bean>
            </list>
        </property>
    </bean>
    <bean class="org.javaboy.Cat" id="cat">
        <property name="name" value="小白"/>
        <property name="color" value="白色"/>
    </bean>
    <bean class="org.javaboy.Cat" id="cat2">
        <property name="name" value="小黑"/>
        <property name="color" value="黑色"/>
    </bean>
    -->
    <!--Map 注入
    <property name="map">
        <map>
            <entry key="age" value="99"/>
            <entry key="name" value="javaboy"/>
        </map>
    </property>
    -->
    <!-- Properties 注入
    <property name="info">
        <props>
            <prop key="age">99</prop>
            <prop key="name">javaboy</prop>
        </props>
    </property>
    -->
    <!--
    <context:component-scan base-package="org.javaboy.javaconfig"/>
    上面这行配置表示扫描 org.javaboy.javaconfig 下的所有 Bean。当然也可以按照类来扫描
    -->
    <!--
    也可以在 XML 配置中按照注解的类型进行扫描
    <context:component-scan base-package="org.javaboy.javaconfig" use-default-filters="true">
    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
</context:component-scan>
    -->
    <!-- 多环境切换xml配置
    <beans profile="dev">
        <bean class="org.javaboy.DataSource" id="dataSource">
            <property name="url" value="jdbc:mysql://localhost:3306/dev"/>
            <property name="userName" value="root"/>
            <property name="password" value="123456"/>
        </bean>
    </beans>
    <beans profile="prod">
        <bean class="org.javaboy.DataSource" id="dataSource">
            <property name="url" value="jdbc:mysql://192.168.1.168:3306/dev"/>
            <property name="userName" value="root"/>
            <property name="password" value="123456"/>
        </bean>
    </beans>
    -->
    <!--bean作用域 singleton,prototype,request,session-->
    <!--java配置 @Scope("session")-->
    <bean class="org.javaboy.User" id="user2" scope="prototype"/>
    <!--spring xml中配置 Aop
    <bean class="org.javaboy.LogAspect" id="logAspect"/>
    <aop:config>
        <aop:pointcut id="pc1" expression="execution(* org.javaboy.aop.commons.*.*(..))"/>
        <aop:aspect ref="logAspect">
            <aop:before method="before" pointcut-ref="pc1"/>
            <aop:after method="after" pointcut-ref="pc1"/>
            <aop:after-returning method="returning" pointcut-ref="pc1" returning="r"/>
            <aop:after-throwing method="afterThrowing" pointcut-ref="pc1" throwing="e"/>
            <aop:around method="around" pointcut-ref="pc1"/>
        </aop:aspect>
    </aop:config>
    -->
    <!--spring-jdbc XML 文件来实现
    <bean class="org.springframework.jdbc.datasource.DriverManagerDataSource" id="dataSource">
        <property name="username" value="root"/>
        <property name="password" value="123"/>
        <property name="url" value="jdbc:mysql:///test01?serverTimezone=Asia/Shanghai"/>
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    </bean>
    <bean class="org.springframework.jdbc.core.JdbcTemplate" id="jdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    -->
    <!--xml配置事务
    com.mysql.jdbc.Driver
    com.mysql.cj.jdbc.Driver M8

    <context:component-scan base-package="org.javaboy"/>
    <bean class="org.springframework.jdbc.datasource.DriverManagerDataSource" id="dataSource">
        <property name="username" value="root"/>
        <property name="password" value="123456"/>
        <property name="url" value="jdbc:mysql://127.0.0.1:3306/demo"/>
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
    </bean>
    <bean class="org.springframework.jdbc.core.JdbcTemplate" id="jdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    -->
    <!--配置 TransactionManager
    <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="transactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    -->
    <!--配置事务要处理的方法,注意，一旦配置了方法名称规则之后，service 中的方法一定要按照这里的名称规则来，否则事务配置不会生效
    <tx:advice id="txAdvice">
        <tx:attributes>
            <tx:method name="update*"/>
            <tx:method name="insert*"/>
            <tx:method name="add*"/>
            <tx:method name="delete*"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="pc1" expression="execution(* org.javaboy.service.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pc1"/>
    </aop:config>
    -->
    <!--java配置事务 如果要开启 Java 注解配置，在 XML 配置中添加如下配置,
    <tx:annotation-driven transaction-manager="transactionManager" />
    需要@ImportResource("applicationContext.xml")
    或者使用，注解@EnableTransactionManagement通知Spring,@Transactional注解的类被事务的切面包围。
    这样@Transactional就可以使用了
    -->
</beans>